!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
addNode	src/bst.cc	/^void bst::addNode(int val)$/;"	f	class:bst	typeref:typename:void
append	src/doublyLinked.cc	/^void doublyLinked::append(int val)$/;"	f	class:doublyLinked	typeref:typename:void
append	src/linkedList.cc	/^void linkedList::append(int val)$/;"	f	class:linkedList	typeref:typename:void
assign	src/doublyLinked.cc	/^void doublyLinked::assign(doublyLinked* source)$/;"	f	class:doublyLinked	typeref:typename:void
assign	src/linkedList.cc	/^void linkedList::assign(linkedList* source) \/\/ Copies "source" list into calling list object$/;"	f	class:linkedList	typeref:typename:void
bst	src/bst.cc	/^bst::bst()$/;"	f	class:bst
bst	src/bst.cc	/^bst::bst(bst& source)$/;"	f	class:bst
clean	src/doublyLinked.cc	/^void doublyLinked::clean()$/;"	f	class:doublyLinked	typeref:typename:void
clean	src/linkedList.cc	/^void linkedList::clean() \/\/ "Cleans" list of all its nodes$/;"	f	class:linkedList	typeref:typename:void
clone	src/doublyLinked.cc	/^doublyLinked* doublyLinked::clone()$/;"	f	class:doublyLinked	typeref:typename:doublyLinked *
clone	src/linkedList.cc	/^linkedList* linkedList::clone() \/\/ Create identical copy of calling list, returns its head$/;"	f	class:linkedList	typeref:typename:linkedList *
deleteNode	src/treeNode.cc	/^void treeNode::deleteNode()$/;"	f	class:treeNode	typeref:typename:void
doublyLinked	src/doublyLinked.cc	/^doublyLinked::doublyLinked()$/;"	f	class:doublyLinked
doublyLinked	src/doublyLinked.cc	/^doublyLinked::doublyLinked(doublyLinked& source)$/;"	f	class:doublyLinked
doublyLinked	src/doublyLinked.cc	/^doublyLinked::doublyLinked(int val)$/;"	f	class:doublyLinked
getLength	src/doublyLinked.cc	/^int doublyLinked::getLength()$/;"	f	class:doublyLinked	typeref:typename:int
getLength	src/linkedList.cc	/^int linkedList::getLength()$/;"	f	class:linkedList	typeref:typename:int
inOrder	src/bst.cc	/^void bst::inOrder()$/;"	f	class:bst	typeref:typename:void
inOrder	src/treeNode.cc	/^void treeNode::inOrder()$/;"	f	class:treeNode	typeref:typename:void
insert	src/doublyLinked.cc	/^void doublyLinked::insert(int val, int index)$/;"	f	class:doublyLinked	typeref:typename:void
insert	src/linkedList.cc	/^void linkedList::insert(int val, int index)$/;"	f	class:linkedList	typeref:typename:void
insertLeaf	src/treeNode.cc	/^void treeNode::insertLeaf(int val)$/;"	f	class:treeNode	typeref:typename:void
linkedList	src/linkedList.cc	/^linkedList::linkedList()$/;"	f	class:linkedList
linkedList	src/linkedList.cc	/^linkedList::linkedList(int val)$/;"	f	class:linkedList
linkedList	src/linkedList.cc	/^linkedList::linkedList(linkedList& source) \/\/ Copy constructor (called during initialisations)$/;"	f	class:linkedList
main	src/test.cc	/^int main()$/;"	f	typeref:typename:int
operator =	src/doublyLinked.cc	/^doublyLinked& doublyLinked::operator=(doublyLinked source)$/;"	f	class:doublyLinked	typeref:typename:doublyLinked &
operator =	src/linkedList.cc	/^linkedList& linkedList::operator=(linkedList source)$/;"	f	class:linkedList	typeref:typename:linkedList &
postOrder	src/bst.cc	/^void bst::postOrder()$/;"	f	class:bst	typeref:typename:void
postOrder	src/treeNode.cc	/^void treeNode::postOrder()$/;"	f	class:treeNode	typeref:typename:void
preOrder	src/bst.cc	/^void bst::preOrder()$/;"	f	class:bst	typeref:typename:void
preOrder	src/treeNode.cc	/^void treeNode::preOrder()$/;"	f	class:treeNode	typeref:typename:void
prettyPrint	src/doublyLinked.cc	/^void doublyLinked::prettyPrint()$/;"	f	class:doublyLinked	typeref:typename:void
prettyPrint	src/linkedList.cc	/^void linkedList::prettyPrint()$/;"	f	class:linkedList	typeref:typename:void
remove	src/doublyLinked.cc	/^void doublyLinked::remove(int index)$/;"	f	class:doublyLinked	typeref:typename:void
remove	src/linkedList.cc	/^void linkedList::remove(int index)$/;"	f	class:linkedList	typeref:typename:void
replace	src/doublyLinked.cc	/^void doublyLinked::replace(int val, int index)$/;"	f	class:doublyLinked	typeref:typename:void
replace	src/linkedList.cc	/^void linkedList::replace(int val, int index) \/\/ In place substitution of data of node $/;"	f	class:linkedList	typeref:typename:void
reverse	src/doublyLinked.cc	/^doublyLinked* doublyLinked::reverse() \/\/ Non mutating reverse; Must be used like this -> list1/;"	f	class:doublyLinked	typeref:typename:doublyLinked *
reverse	src/linkedList.cc	/^linkedList* linkedList::reverse() \/\/ Non mutating reverse; Must be used like this -> list1.ass/;"	f	class:linkedList	typeref:typename:linkedList *
search	src/bst.cc	/^bool bst::search(int key)$/;"	f	class:bst	typeref:typename:bool
search	src/treeNode.cc	/^bool treeNode::search(int key)$/;"	f	class:treeNode	typeref:typename:bool
treeNode	src/treeNode.cc	/^treeNode::treeNode(int val)$/;"	f	class:treeNode
treeNode	src/treeNode.cc	/^treeNode::treeNode(treeNode& source)$/;"	f	class:treeNode
~bst	src/bst.cc	/^bst::~bst()$/;"	f	class:bst
~doublyLinked	src/doublyLinked.cc	/^doublyLinked::~doublyLinked()$/;"	f	class:doublyLinked
~linkedList	src/linkedList.cc	/^linkedList::~linkedList()$/;"	f	class:linkedList
~treeNode	src/treeNode.cc	/^treeNode::~treeNode()$/;"	f	class:treeNode
